cmake_minimum_required(VERSION 3.6)
project(fuerte CXX)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
enable_testing()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


#########################################################################################
# Configuration
option(FUERTE_TESTS    "Build Tests" OFF)
option(FUERTE_EXAMPLES "Build EXAMPLES" OFF)

#########################################################################################
# Dependencies

option(BuildVelocyPackExamples "Build examples" OFF)
add_subdirectory(3rdParty/cmake-for-boost)
add_subdirectory(3rdParty/velocypack)
add_subdirectory(3rdParty/curlpp2)

#########################################################################################
# Main Project
add_library(fuerte STATIC
    src/ConnectionUrl.cpp
    src/HttpConnection.cpp
    src/VppConnection.cpp
    src/Connection.cpp
    src/ConOption.cpp
    src/Server.cpp
    src/Database.cpp
    src/Collection.cpp
    src/Document.cpp
    src/Cursor.cpp
    src/Version.cpp
    src/HeaderCommon.cpp
    src/HeaderMulti.cpp
    src/HeaderLoader.cpp

    src/next/connection.cpp
    src/next/database.cpp
    src/next/collection.cpp
)
#  xxhash.cpp

target_include_directories(fuerte PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdParty/curlpp2/include
)

# FIXME
#target_include_directories(fuerte PRIVATE
#    ${CMAKE_CURRENT_SOURCE_DIR}/3rdParty/curlpp2/include
#)

target_link_libraries(fuerte PUBLIC
    velocypack
    curlpp
    Boost::system
)
target_compile_definitions(fuerte PUBLIC
    BOOST_ASIO_DISABLE_THREADS
)

# FIXME -FPIC does not end up in curlpp
set_target_properties(fuerte velocypack curlpp PROPERTIES POSITION_INDEPENDENT_CODE ON)
#DVELOCYPACK_XXHASH=1

## fuerte-next
add_library(fuerte-next STATIC
    src/next/connection.cpp
    src/next/database.cpp
    src/next/collection.cpp
)

target_include_directories(fuerte-next PUBLIC
    ${Boost_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdParty/curlpp2/include
)

add_subdirectory(3rdParty/googletest) # should not be required by examples
#########################################################################################
# Tests
if(FUERTE_TESTS)
#if(CMAKE_TESTING)
    add_subdirectory(tests)
endif()

#########################################################################################
# Examples
if(FUERTE_EXAMPLES)
    add_subdirectory(examples)
endif()

#########################################################################################
# Clang Completion
#copy compile commands to source dir
if( EXISTS "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json" )
    message(STATUS "copy compile_commands.json")
    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json
        ${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json
    )
endif()


#########################################################################################
# Install
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    if(UNIX)
        set(CMAKE_INSTALL_PREFIX  "$ENV{HOME}/local")
    else()
        message("not implemented for other operating systems")
    endif()
endif()

install(TARGETS fuerte DESTINATION lib)

install(
    DIRECTORY   "include/fuerte"
    DESTINATION include
)

include(CPack) #should be last command
